# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dle8_utmi7ZtxNtrxhexBK6BpDPKdHEw
"""

import numpy as np
import pandas as pd

"""## 데이터 확인하기"""

data = pd.read_csv("/content/data_week2.csv", encoding='cp949')

data

# 변수명 변경
data.rename(columns={
    '전력사용량(kWh)': '전력사용량',
    '기온(°C)': '기온',
    '풍속(m/s)': '풍속',
    '습도(%)': '습도',
    '강수량(mm)': '강수량',
    '일조(hr)': '일조'
}, inplace=True)

# 결과 출력
print(data.columns)

data.info()

"""## 데이터 전처리"""

data["num"] = data["num"].astype("object")
data[["비전기냉방설비운영", "태양광보유"]] = data[["비전기냉방설비운영", "태양광보유"]].astype("int")

data.info()

# date_time 열을 datetime 형식으로 변환
data['date_time'] = pd.to_datetime(data['date_time'])

# 월, 일, 시를 각각 새로운 열로 추가
data['월'] = data['date_time'].dt.month
data['일'] = data['date_time'].dt.day
data['시'] = data['date_time'].dt.hour

# 요일 컬럼 추가 (월요일, 화요일, ...)
data['요일'] = data['date_time'].dt.day_name()

# 주말/평일 컬럼 추가 (0: 평일, 1: 주말)
data['주말_평일'] = data['date_time'].dt.weekday.apply(lambda x: 1 if x >= 5 else 0)

data

"""### 변수 시각화"""

#!sudo apt-get install -y fonts-nanum
#!sudo fc-cache -fv
#!rm ~/.cache/matplotlib -rf

import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')
plt.figure(figsize=(6, 4))
plt.text(0.5, 0.5, '한글 폰트 테스트', size=15)
plt.show()

"""* 요일별 전력사용량"""

import matplotlib.pyplot as plt

# 요일별로 전력 사용량의 평균을 계산
data_grouped = data.groupby('요일')['전력사용량'].mean()

# 요일 순서 설정 (월요일 ~ 일요일)
days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
data_grouped = data_grouped.reindex(days_order)

# 요일별 전력 사용량 시각화
data_grouped.plot(kind='bar', figsize=(10, 6), color='skyblue')
plt.title('요일별 전력 사용량')
plt.ylabel('평균 전력 사용량')
plt.xlabel('요일')
plt.show()

"""* 평일/주말별 전력사용량"""

import matplotlib.pyplot as plt

# 주말_평일 별로 전력 사용량의 평균을 계산
data_grouped_1 = data.groupby('주말_평일')['전력사용량'].mean()

# 주말_평일 별 전력 사용량 시각화
data_grouped_1.plot(kind='bar', figsize=(10, 6), color='skyblue')

# X축 레이블을 평일/주말로 변경
plt.xticks([0, 1], ['평일', '주말'], rotation=0)

# 그래프 제목과 레이블
plt.title('평일/주말 별 전력 사용량')
plt.ylabel('평균 전력 사용량 (kWh)')
plt.xlabel('평일/주말')

plt.show()

"""* 월별 전력사용량"""

# 월별로 전력 사용량의 평균을 계산
data_grouped_1 = data.groupby('월')['전력사용량'].mean()

# 월별 전력 사용량 시각화
data_grouped_1.plot(kind='bar', figsize=(10, 6), color='skyblue')

# 그래프 제목과 레이블
plt.xticks(rotation=0)
plt.title('월별 전력 사용량')
plt.ylabel('평균 전력 사용량')
plt.show()

"""* 시간대별 전력사용량"""

# 시간대별로 전력 사용량의 평균을 계산
data_grouped_2 = data.groupby('시')['전력사용량'].mean()

# 시간대별 전력 사용량 선그래프 시각화
plt.figure(figsize=(10, 6))
plt.plot(data_grouped_2.index, data_grouped_2.values, marker='o', linestyle='-', color='skyblue')

# 그래프 제목과 레이블
plt.title('시간대별 전력 사용량')
plt.ylabel('평균 전력 사용량')
plt.xlabel('시간대')
plt.xticks(range(0, 24))
plt.grid(True)  # 그리드 추가
plt.show()

import matplotlib.pyplot as plt

# 각 월별로 전력 사용량 평균 계산
data_grouped_6 = data[data['월'] == 6].groupby('시')['전력사용량'].mean()
data_grouped_7 = data[data['월'] == 7].groupby('시')['전력사용량'].mean()
data_grouped_8 = data[data['월'] == 8].groupby('시')['전력사용량'].mean()

# 시간대별 전력 사용량 선그래프 시각화
plt.figure(figsize=(10, 6))

# 각 월별로 선 그리기
plt.plot(data_grouped_6.index, data_grouped_6.values, marker='o', linestyle='-', color='skyblue', label='6월')
plt.plot(data_grouped_7.index, data_grouped_7.values, marker='o', linestyle='-', color='orange', label='7월')
plt.plot(data_grouped_8.index, data_grouped_8.values, marker='o', linestyle='-', color='lightgreen', label='8월')

# 그래프 제목과 레이블
plt.title('시간대별 전력 사용량 (6월, 7월, 8월)')
plt.ylabel('평균 전력 사용량')
plt.xlabel('시간대')
plt.xticks(range(0, 24))
plt.grid(True)  # 그리드 추가

# 범례 추가
plt.legend()
plt.show()

"""* 기온별 전력사용량"""

print(data["기온"].min(), data["기온"].max())

# 산점도 시각화
plt.figure(figsize=(18, 6))
plt.scatter(data['기온'], data['전력사용량'], color='skyblue', alpha=0.7, s=2)

# 그래프 제목과 레이블
plt.title('기온별 전력 사용량 (산점도)')
plt.xlabel('기온')
plt.ylabel('전력 사용량')
plt.xticks(range(int(data['기온'].min()), int(data['기온'].max()) + 1))  # 기온 범위에 맞게 x축 설정
plt.grid(True)  # 그리드 추가
plt.show()

"""* 태양광 보유 유무에 따른 전력사용량"""

import seaborn as sns
# Boxplot 시각화
plt.figure(figsize=(10, 6))
sns.boxplot(x='태양광보유', y='전력사용량', data=data)
plt.xticks([0, 1], ['비보유', '보유'], rotation=0)
plt.title('태양광 보유 여부에 따른 전력 사용량 분포')
plt.xlabel('태양광 보유 여부 (0: 비보유, 1: 보유)')
plt.ylabel('전력사용량 (kWh)')
plt.show()

# Bar plot 시각화 (평균값)
plt.figure(figsize=(10, 6))
sns.barplot(x='태양광보유', y='전력사용량', data=data)

# X축 레이블을 평일/주말로 변경
plt.xticks([0, 1], ['비보유', '보유'], rotation=0)
plt.title('태양광 보유 여부에 따른 전력 사용량 평균')
plt.xlabel('태양광 보유 여부 (0: 비보유, 1: 보유)')
plt.ylabel('전력사용량 (kWh)')
plt.show()

"""- 전력사용량이 많은 곳일수록 태양광 보유하고 있는 거 같음 (더 자세한 분석 필요)
- 맞다면 결론 때 전력사용량+일사량 내림차순 정렬해서 상위 n곳에 태양광발전량 설치
- 근데 상관분석 해봐야 할 거 같음 ex) 전력사용량 뿐만 아니라 평균기온이 제일 관계있다면 평균기온+일사량 이렇게 내림차순 해야될 수도?

* 비전기냉방설비운영 여부에 따른 전력사용량 평균
"""

import seaborn as sns
# Boxplot 시각화
plt.figure(figsize=(10, 6))
sns.boxplot(x='비전기냉방설비운영', y='전력사용량', data=data)
plt.xticks([0, 1], ['비보유', '보유'], rotation=0)
plt.title('비전기냉방설비운영 여부에 따른 전력 사용량 분포')
plt.xlabel('비전기냉방설비운영 여부 (0: 비보유, 1: 보유)')
plt.ylabel('전력사용량 (kWh)')
plt.show()

# Bar plot 시각화 (평균값)
plt.figure(figsize=(10, 6))
sns.barplot(x='비전기냉방설비운영', y='전력사용량', data=data)

# X축 레이블을 평일/주말로 변경
plt.xticks([0, 1], ['비보유', '보유'], rotation=0)
plt.title('비전기냉방설비운영 여부에 따른 전력 사용량 평균')
plt.xlabel('비전기냉방설비운영 여부 (0: 비보유, 1: 보유)')
plt.ylabel('전력사용량 (kWh)')
plt.show()

"""* 전력사용량을 많이 쓰는 곳일수록 비전기냉방설비를 많이 보유하고 있다는 곳이라고 생각할 수 있음"""

